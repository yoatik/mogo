@use "./variables" as abstract;
@use "./functions" as *;
// Breakpoint mixins
@mixin respond-to($breakpoint) {
    // If the key exists in the map
    @if map-has-key(abstract.$breakpoints, $breakpoint) {
        // Prints a media query based on the value
        @media #{inspect(map-get(abstract.$breakpoints, $breakpoint))} {
            @content;
        }
    }
    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "+"Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}

// Font size rem mixins
@mixin font-size-rem($size) {
    font-size: $size * 1px; // This is for the browser which doesn't support rem
    font-size: calculateRem($size); // This is for the browser which support rem
}

// Font size em mixins
@mixin font-size-em($size) {
    font-size: calculateEm($size);
}

// Get font face mixins
@mixin font-face($font-name, $file-name, $weight, $style) {
    @font-face {
        font-family: quote($font-name);
        src: url($file-name + '.ttf');
        src: url($file-name + '.ttf') format('embedded-opentype'), url($file-name + '.ttf') format('woff'), url($file-name + '.ttf') format('woff2'), url($file-name + '.ttf') format('truetype'), url($file-name + '.ttf') format('svg');
        font-weight: $weight;
        font-style: $style;
        font-display: swap;
    }
}

// Font weight & style mixins
@mixin font($font-weight, $font-style) {
    font-weight: $font-weight;
    font-style: $font-style;
}

// Margin mixins
@mixin margin($margin-top, $margin-right, $margin-bottom, $margin-left) {
    @if ($margin-top !=null) {
        margin-top: calculateEm($margin-top);
    }
    @if ($margin-right !=null) {
        margin-right: calculateEm($margin-right);
    }
    @if ($margin-bottom !=null) {
        margin-bottom: calculateEm($margin-bottom);
    }
    @if ($margin-left !=null) {
        margin-left: calculateEm($margin-left);
    }
}

// Margin mixins
@mixin padding($padding-top, $padding-right, $padding-bottom, $padding-left) {
    @if ($padding-top !=null) {
        padding-top: calculateEm($padding-top);
    }
    @if ($padding-right !=null) {
        padding-right: calculateEm($padding-right);
    }
    @if ($padding-bottom !=null) {
        padding-bottom: calculateEm($padding-bottom);
    }
    @if ($padding-left !=null) {
        padding-left: calculateEm($padding-left);
    }
}

// Font weight mixins
@mixin font-weight($font-weight) {
    font-weight: $font-weight;
}

// Placeholder mixins
@mixin placeholder {
    &::placeholder {
        color: abstract.$grayColor !important;
    }
    &::-moz-placeholder {
        color: abstract.$grayColor !important;
    }
    &:-ms-input-placeholder {
        color: abstract.$grayColor !important;
    }
    &::-webkit-input-placeholder {
        color: abstract.$grayColor !important;
    }
}

// Scrollbar mixins
@mixin scrollbar($size, $foreground-color, $background-color: mix($foreground-color, white, 50%)) {
    // For Google Chrome
    &::-webkit-scrollbar {
        width: $size;
        height: $size;
    }
    &::-webkit-scrollbar-thumb {
        background: $foreground-color;
        border-radius: 5px;
        &:hover {
            background-color: $foreground-color;
        }
    }
    &::-webkit-scrollbar-track {
        background: $background-color;
    }
    // For Internet Explorer
    & {
        scrollbar-face-color: $foreground-color;
        scrollbar-track-color: $background-color;
    }
}

// Box shadow mixins
@mixin box-shadow($shadow-offset-x, $shadow-offset-y, $shadow-blur-radius, $shadow-spread-radius, $shadow-color, $important) {
    @if ($important!=important) {
        box-shadow: $shadow-offset-x+px $shadow-offset-y+px $shadow-blur-radius+px $shadow-spread-radius+px $shadow-color;
    }
    @else {
        box-shadow: $shadow-offset-x+px $shadow-offset-y+px $shadow-blur-radius+px $shadow-spread-radius+px $shadow-color !important;
    }
}